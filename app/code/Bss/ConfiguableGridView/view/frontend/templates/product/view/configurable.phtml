<style type="text/css" media="screen">
	th.col.qty.attributes {
	    min-width: 110px;
	    text-align: left !important;
	}
	td.col.qty.first-attr.bss-swatch {
	    min-width: 110px;
	    text-align: left;
	    padding-left: 0px;
	    padding-right: 0px;
	}
	span.label-grv {
	    position: relative;
	    top: -5px;
	    left: 3px;
	}
	.total-area span.label-grv {
	    position: relative;
	    top: 0px;
	    left: -4px;
	}
</style>
<?php
/**
* BSS Commerce Co.
*
* NOTICE OF LICENSE
*
* This source file is subject to the EULA
* that is bundled with this package in the file LICENSE.txt.
* It is also available through the world-wide-web at this URL:
* http://bsscommerce.com/Bss-Commerce-License.txt
*
* =================================================================
*                 MAGENTO EDITION USAGE NOTICE
* =================================================================
* This package designed for Magento COMMUNITY edition
* BSS Commerce does not guarantee correct work of this extension
* on any other Magento edition except Magento COMMUNITY edition.
* BSS Commerce does not provide extension support in case of
* incorrect edition usage.
* =================================================================
*
* @category   BSS
* @package    Bss_ConfiguableGridView
* @author     Extension Team
* @copyright  Copyright (c) 2015-2016 BSS Commerce Co. ( http://bsscommerce.com )
* @license    http://bsscommerce.com/Bss-Commerce-License.txt
*/
$_product    = $block->getProduct();
$_maxPrice = 0;
$_attributes = $block->decorateArray($block->getAllowAttributes());
$helper = $this->helper('Bss\ConfiguableGridView\Helper\Data');
$taxRate =  ($block->getRateTax() > 0)? $block->getRateTax() : 0;
$taxRate  = $taxRate/100;
?>

<?php if ($_product->isSaleable() && count($_attributes)):?>
	
	<?php
	$array = array();
	$assc_product_data =  $block->getConfiguableGridViewData();

	$quoteArray = array();
	if($helper->getCurrentUrl() != 'catalog_product_view') {
		$cart = $this->helper('\Magento\Checkout\Helper\Cart');
		$cart = $cart->getQuote()->getAllItems();
		foreach ($cart as $key => $item) {
			if (!empty($item->getParentItemId()) && $item->getParentItem()->getProductId() == $_product->getId() ) {
				$quoteArray[$item->getProductId()]['item_id'] = $item->getParentItem()->getId();
				$quoteArray[$item->getProductId()]['qty'] = $item->getParentItem()->getQty();
			}
		};
	}
	?>
	
	<div id="bss_configurablegridview" class="cart table-wrapper">
		<input type="hidden" name="configurable_grid_table" value="Yes" />
		<table class="configurable-product-table cart items data table">
			<thead>
				<tr class="first last">
					<?php foreach($_attributes as $_attribute ) : ?>
						<th class="col qty attributes"><?php echo $block->escapeHtml($_attribute->getProductAttribute()->getStoreLabel()); ?></th>
					<?php endforeach ?>
					<?php if($helper->isShowConfig('stock_availability')) : ?>
						<th class="col qty avaibility"><?php echo __('Availability'); ?></th>
					<?php endif ?>
					<?php if($helper->canShowUnit()) : ?>
						<th class="col qty unit"><?php echo __('Unit Price'); ?></th>
					<?php endif ?>
					<?php if($helper->isShowConfig('subtotal')) : ?>
						<th class="col qty subtotal"><?php echo __('Subtotal'); ?></th>
					<?php endif ?>
					<th class="col qty"><?php echo __('Qty'); ?></th>
					<th class="no-display hidden"></th>
				</tr>
			</thead>
			<tbody class="cart item">
				<?php $i = 0; ?>
				<?php foreach ($assc_product_data as $productVal) : ?>

					<tr class="item-info">

						<?php foreach ($productVal['attributes'] as $attribute_id => $attribute) : ?>
							<td class="col qty first-attr bss-swatch" attribute-code="<?php echo $attribute['code'];?>" attribute-value="<?php echo $attribute['id']; ?>" attribute-id="<?php echo $attribute_id; ?>">
								<span class="attr-label">
	                                <?php 
	                                    echo $attribute['label'];
	                                ?>
	                            </span>
                                <input type="hidden" name="bss_super_attribute[<?php echo $i ?>][<?php echo $attribute_id ?>]" value="<?php echo $attribute['id'] ?>" class="swatch-attribute">
                            </td>
						<?php endforeach ?>

						<?php if($helper->isShowConfig('stock_availability')) : ?>

							<?php if($helper->isShowConfig('stock_numer')) : ?>
								<?php if((int)$productVal['stock']['is_in_stock'] == 1) : ?>
									<?php if((int)$productVal['stock']['use_config_manage_stock'] == 1 || ( (int)$productVal['stock']['use_config_manage_stock'] == 0 && (int)$productVal['stock']['manage_stock'] == 1) ) : ?>
										<td class="col qty"><?php echo (int)$productVal['stock']['qty'] ?></td>
									<?php else : ?>
										<td class="col qty">âˆž</td>
									<?php endif ?>
								<?php else: ?>
									<td class="col qty"><?php echo 'Out of Stock'; ?></td>
								<?php endif ?>

							<?php else : ?>

								<td class="col qty"><?php echo ( (int)$productVal['stock']['is_in_stock'] == 1 ? 'In Stock' : 'Out of Stock' ); ?></td>
							<?php endif ?>

						<?php endif ?>

						<?php if($helper->canShowUnit()): ?>
							<td class="col qty">
								<div><?php echo $helper->getDisplayPriceWithCurrency($productVal['price']['finalPrice']) ?></div>
								<?php if((float)$productVal['price']['finalPrice'] < (float)$productVal['price']['old_price']): ?>
									<div class="unit-old"><?php echo $helper->getDisplayPriceWithCurrency($productVal['price']['old_price']) ?></div>
								<?php endif; ?>
							</td>
						<?php endif; ?>

						<?php if($helper->isShowConfig('subtotal')) : ?>
							<td class="col qty subtotal"><?php echo $helper->getDisplayPriceWithCurrency(0) ?></td>
						<?php endif ?>
						<td class="col qty">
							<?php if( !empty($quoteArray[$productVal['stock']['product_id']]) ) : ?>
								<input type="text" class="qty_att_product input-text qty validate-not-negative-number required-entry validate-digits" id="super_group_qty_<?php echo $i ?>" value="<?php echo $quoteArray[$productVal['stock']['product_id']]['qty'] ?>" name="config_table_qty[<?php echo $i ?>]" <?php echo ((int)$productVal['stock']['is_in_stock'] == 1) ? '' : 'disabled' ?> index="<?php echo $i ?>"/>
							<?php else : ?>
								<input type="text" class="qty_att_product input-text qty validate-not-negative-number required-entry validate-digits" id="super_group_qty_<?php echo $i ?>" value="0" name="config_table_qty[<?php echo $i ?>]" <?php echo ((int)$productVal['stock']['is_in_stock'] == 1) ? '' : 'disabled' ?> index="<?php echo $i ?>"/>
							<?php endif ?>
							<input type="hidden" class="unit-price" value="<?php echo $productVal['price']['finalPrice'] ?>" />
							<?php $array[$i][0] = $productVal['price']['finalPrice']; ?>
							<?php $array[$i]['old'] = $productVal['price']['old_price']; ?>
							<?php 
								if($productVal['price']['old_price'] > $_maxPrice) {
									$_maxPrice = $productVal['price']['old_price'];
								}
							?>
							<?php foreach ($productVal['tier_price'] as $tier_price) : ?>
								<?php $array[$i][$tier_price['price_qty']] = $tier_price['website_price']/(1/(1+$taxRate)); ?>
							<?php endforeach ?>
						</td>
						<td class="no-display hidden">
							<input type="hidden" value="<?php echo (!empty($quoteArray[$productVal['stock']['product_id']]) ? $quoteArray[$productVal['stock']['product_id']]['item_id'] : '') ?>" name="quote_item_id[<?php echo $i ?>]"/>
						</td>
					</tr>
					<?php $i++; ?>
				<?php endforeach ?>
			</tbody>
		</table>
		<!-- <input type="text" class="required-entry check-configuable-product" /> -->
		<img title="Reset" class="v-middle reset-configurablegridview" alt="reset" src="<?php echo $block->getViewFileUrl('Bss_ConfiguableGridView::images/ico_reset.png'); ?>" />
	</div>

	<script>
		var configuable_qty_price_array = <?php echo json_encode($array); ?>;
		var old_configuable_qty_price_array = <?php echo json_encode($array); ?>;
		var bss_optionAmount = '';
		var bss_configurablegridview_timer;
		var taxrate = <?php echo $taxRate; ?>;

		require(['jquery', 'bss/swatch'],function($){
			var jsonSwatchConfig = <?php /* @escapeNotVerified */
                    echo $swatchOptions = $block->getJsonSwatchConfig(); ?>,
            	jsonAttrLabelConfig = <?php /* @escapeNotVerified */ echo $block->getJsonAttrLabelConfig(); ?>;
			$('.item-info .bss-swatch').swatch({
				jsonConfig: <?php /* @escapeNotVerified */ echo $swatchOptions = $block->getJsonConfig(); ?>,
				jsonSwatchConfig: jsonSwatchConfig,
				mediaCallback: '<?php /* @escapeNotVerified */ echo $block->getMediaCallback() ?>',
				onlyMainImg: '<?php /* @escapeNotVerified */ echo $block->getVar('change_only_base_image',
                    'Magento_Swatches') ?: 'false'; ?>',
				magentoVersion: '<?php echo $this->getCurentVersion(); ?>',
			});

			$(document).ready(function() {
				var configuable_array_price = new Array();
				var configuable_price_old = '<?php echo $_product->getFinalPrice(); ?>';
				var old_subtotal = 0;
				var configuable_currency_symbol = '<?php echo $this->helper('Bss\ConfiguableGridView\Helper\Data')->getCurrencySymbol(); ?>';
				var configuable_currency_symbol_position = configuable_price_old.indexOf(configuable_currency_symbol);
				var showTotalDetailed = '<?php echo $helper->isShowConfig("detailed_total"); ?>';

				if(jQuery('.price-box .special-price:first').length > 0) {
					var isSpecial = true;
					var configuable_array_price_old = new Array();
					var configuable_price_regular_old = '<?php echo $_maxPrice; ?>';
				} else {
					var isSpecial = false;
				}

				if(showTotalDetailed) {
					var totalDetailTable = '<?php echo $this->getDetailHtml(); ?>';
					$('#product-options-wrapper').append(totalDetailTable);
				}

				function convertPriceConfiguableProduct(price) {
					price = parseFloat(price).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
					if(configuable_currency_symbol_position > 0) {
						return price += configuable_currency_symbol;
					}

					return price = configuable_currency_symbol + price;
				};

				$('#bss_configurablegridview .qty_att_product').change(function() {

					var totalqty = 0;
					$('#bss_configurablegridview .qty_att_product').each(function(){
							totalqty += parseFloat($(this).val());
					})
					$('#bss_configurablegridview .qty_att_product').each(function() {

						confi_qty_value = parseInt($(this).val());

						if(showTotalDetailed) {
							var totalDetail = [];
						}

						if(confi_qty_value > 0) {
							for(var key in configuable_qty_price_array[$(this).attr('index')]){
								if(totalqty >= key) confi_price_value = configuable_qty_price_array[$(this).attr('index')][key];
							}
							configuable_array_price[$(this).attr('index')] = parseFloat(confi_qty_value * confi_price_value);

							if(isSpecial) {
								configuable_array_price_old[$(this).attr('index')] = parseFloat(confi_qty_value * configuable_qty_price_array[$(this).attr('index')]['old']);
							}

							if($(this).parent().parent().find('.subtotal').length > 0) {
								$(this).parent().parent().find('.subtotal').text(convertPriceConfiguableProduct(configuable_array_price[$(this).attr('index')]));
							}
						}
						else {
							delete configuable_array_price[$(this).attr('index')];
							if(isSpecial) {
								delete configuable_array_price_old[$(this).attr('index')];
							}
							if($(this).parent().parent().find('.subtotal').length > 0) {
								$(this).parent().parent().find('.subtotal').text(convertPriceConfiguableProduct(old_subtotal));
							}
						}

						configuble_sum_total = parseFloat(configuable_array_price.reduce(function(a, b) { return a + b; }, 0));
						if(isSpecial) {
							configuble_sum_total_old = parseFloat(configuable_array_price_old.reduce(function(a, b) { return a + b; }, 0));
						}

						if(showTotalDetailed) {
							$('#bss_configurablegridview .qty_att_product').each(function(){
								var eachQty = parseInt($(this).val());

								var firstAttr = $(this).parent().parent().find('.first-attr');
								var firstId = firstAttr.attr('attribute-id');
								var firstValue = firstAttr.attr('attribute-value');

								if(eachQty > 0) {
									if(typeof totalDetail[firstId + firstValue] == 'undefined') {
										totalDetail[firstId + firstValue] = [];
										totalDetail[firstId + firstValue]['id'] = firstValue;
										totalDetail[firstId + firstValue]['qty'] = parseInt(eachQty);
										if (jsonSwatchConfig && jsonSwatchConfig[firstId] && jsonSwatchConfig[firstId][firstValue]) {
											totalDetail[firstId + firstValue]['attr'] = jsonSwatchConfig[firstId][firstValue];
										}
										totalDetail[firstId + firstValue]['label'] = jsonAttrLabelConfig[firstId][firstValue];
									} else {
										totalDetail[firstId + firstValue]['qty'] += parseInt(eachQty);
									}
								}
							});

							var rows = '';
							var totalQty = 0;
							for (key in totalDetail) {
							    if(parseInt(totalDetail[key]['qty']) > 0) {
							    	id = totalDetail[key]['id'];
					                var html = '';
					                if (totalDetail[key]['attr']) {
					                	type = parseInt(totalDetail[key]['attr'].type, 10);
						                value = totalDetail[key]['attr'].hasOwnProperty('value') ? totalDetail[key]['attr'].value : '';
						                thumb = totalDetail[key]['attr'].hasOwnProperty('thumb') ? totalDetail[key]['attr'].thumb : '';
						                label = totalDetail[key]['attr'].hasOwnProperty('label') ? totalDetail[key]['attr'].label : '';
						                attr =
						                    ' option-type="' + type + '"' +
						                    ' option-id="' + id + '"' +
						                    ' option-label="' + label + '"' +
						                    ' option-tooltip-thumb="' + thumb + '"' +
						                    ' option-tooltip-value="' + value + '"';

								    	if (type === 0) {
							                // Text
							                html += '<div class="swatch-option text" ' + attr + '>' + (value ? value : label) +
							                    '</div>';
							            } else if (type === 1) {
							                // Color
							                html += '<div class="swatch-option color" ' + attr +
							                    '" style="background: ' + value +
							                    ' no-repeat center; background-size: initial;">' + '' +
							                    '</div>';
							                html += '<span class="label-grv">' + label + '</span>';
							            } else if (type === 2) {
							                // Image
							                html += '<div class="swatch-option image" ' + attr +
							                    '" style="background: url(' + value + ') no-repeat center; background-size: initial;">' + '' +
							                    '</div>';
							            } else if (type === 3) {
							                // Clear
							                html += '<div' + attr + '></div>';
							            } else {
							                // Defaualt
							                html += '<div' + attr + '>' + label + '</div>';
							            }
							        } else {
							        	html += '<div>' + totalDetail[key]['label']['label'] + '</div>';
							        }

							    	rows += '<tr><td>' + html + '</td><td class="a-right">' + totalDetail[key]['qty'] + '</td></tr>';
							    	totalQty += parseInt(totalDetail[key]['qty']);
							    }
							}

							if(rows != '') {
								var table = '<table id="qty-selected-detail-table">'+ rows +'</table>';
								jQuery('.total-area .qty-detail').html(table);
							} else {
								jQuery('.total-area .qty-detail').html("");
							}
							
							$('.total-area .qty-total .value').text(totalQty);
							$('.total-area .price-total .value').text(convertPriceConfiguableProduct(configuble_sum_total));
							$('.total-area .price-total .price-total-excl').text(' (Excl. Tax: ' + convertPriceConfiguableProduct(configuble_sum_total*(1/(1+taxrate))) + ')');
							var unitprice = 0;
							if (totalQty > 0) {
								unitprice = configuble_sum_total/totalQty;
							}
							$('.total-area .price-unit .value').text(convertPriceConfiguableProduct(unitprice));
							$('.total-area .price-unit .price-unit-excl').text(' (Excl. Tax: ' + convertPriceConfiguableProduct(unitprice*(1/(1+taxrate))) + ')');
						}
					})
				});

				$('.reset-configurablegridview').click(function() {
					if(bss_optionAmount !== '') {
						var new_configuable_price_old = parseFloat(configuable_price_old) + parseFloat(bss_optionAmount);
					}else {
						var new_configuable_price_old = configuable_price_old;
					};
					
					configuable_array_price = new Array();
					configuable_array_price_old = new Array();
					$('#bss_configurablegridview .qty_att_product').each(function() {
						$(this).val(0);
						if($(this).parent().parent().find('.subtotal').length > 0) {
							$(this).parent().parent().find('.subtotal').text(convertPriceConfiguableProduct(old_subtotal));
						}
					});

					$('.total-area .qty-detail').html("");
					$('.total-area .qty-total .value').text(0);
					$('.total-area .price-total .value').text(convertPriceConfiguableProduct(0));
					$('.total-area .price-total .price-total-excl').text(' (Excl. Tax: ' + convertPriceConfiguableProduct(0) + ')');
					$('.total-area .price-unit .value').text(convertPriceConfiguableProduct(0));
					$('.total-area .price-unit .price-unit-excl').text(' (Excl. Tax: ' + convertPriceConfiguableProduct(0) + ')');
                                        
				});
			});
		});
	</script>

<?php endif;?>